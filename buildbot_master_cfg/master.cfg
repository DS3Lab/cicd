# -*- python -*-
# ex: set filetype=python:

from buildbot.plugins import *

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

# OPT OUT BUILDBOT USAGE STATISTICS
c['buildbotNetUsageData'] = None


####### WORKERS

# The 'workers' list defines the set of recognized workers. Each element is
# a Worker object, specifying a unique worker name and password.  The same
# worker name and password must be configured on the worker.
c['workers'] = [worker.Worker("linux-worker", "CHANGE_ME_WITH_THE_PROPER_ID")]

# 'protocols' contains information about protocols which master will use for
# communicating with workers. You must define at least 'port' option that workers
# could connect to your master with this protocol.
# 'port' must match the value configured into the workers (with their
# --master option)
c['protocols'] = {'pb': {'port': 9989}}

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot version of a python hello-world project.

c['change_source'] = []

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'runtests' build

c['schedulers'] = []

c['schedulers'].append(schedulers.AnyBranchScheduler(
    name="check_testbench",
    builderNames=["testbench-builder"]))


####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which workers can execute them.  Note that any particular build will
# only take place on one worker.

testbench_first = util.BuildFactory()

from easeml.step import LaunchEaseML

testbench_first.addStep(
    LaunchEaseML.EaseML()
    )



c['builders'] = []
# Add the BuildFactory configuration to the master
c['builders'].append(
    util.BuilderConfig(name="testbench-builder",
      workernames=["linux-worker"],
      factory=testbench_first))


####### BUILDBOT SERVICES

# 'services' is a list of BuildbotService items like reporter targets. The
# status of each build will be pushed to these targets. buildbot/reporters/*.py
# has a variety to choose from, like IRC bots.

c['services'] = []

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot installation's
# home pages (linked to the 'titleURL').

c['title'] = "EaseML CI"
c['titleURL'] = "http://ease.ml"

#c['manhole'] = util.TelnetManhole(1234, "leo", "leo")

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server is visible. This typically uses the port number set in
# the 'www' entry below, but with an externally-visible host name which the
# buildbot cannot figure out without some help.

c['buildbotURL'] = "EXAMPLE:http://ec2-18-219-109-220.us-east-2.compute.amazonaws.com:8010/"

# minimalistic config to activate new web UI
c['www'] = dict(port=8010,
                plugins=dict(waterfall_view={}, console_view={}, grid_view={}))

# user configurations
c['www']['authz'] = util.Authz(
        allowRules = [
            util.AnyEndpointMatcher(role="admins")
        ],
        roleMatchers = [
            util.RolesFromUsername(roles=['admins'], usernames=['leaguilar','cezhang'])
        ]
)
c['www']['auth'] = util.UserPasswordAuth([('leaguilar','MYSTRONGPASSOWORD'),('cezhang','MYSTRONGPASSOWORD')])

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}

from easemlci.git.CheckSuite import CheckSuiteHandler

## GITHUB
c['www']['change_hook_dialects'] = {
    'github': {
        'secret': '36fffbe5556ce2ce070867cbbb5cc61f',
        'class' : CheckSuiteHandler
    }
}

