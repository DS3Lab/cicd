#!/usr/bin/env python 
import argparse
import subprocess
from easeml_cicd.buildbot.check_in import github_api
import datetime
from subprocess import PIPE
import shutil
from shutil import copyfile
import requests
import os

from easeml_cicd.buildbot.mail import sendMailGmail
from easeml_cicd.core import utils
import easeml_cicd
from github import Github
import json


class EaseMLCICDCheckManager:
    def __init__(self, name, client, app_id, inst_id, project, revision, branch, module):
        self.name = name
        self.project = project
        self.check_data = None
        self.client = client
        # FIX
        self.token = inst_id
        self.user_or_app_name=app_id
        self.branch = branch
        self.revision = revision
        self.module = module(name, client, app_id, inst_id, project, revision, branch)
        self.summary = ''
        self.text = ''
        self.text_data = ''

    def start_check(self):
        req = {"name": self.name}
        # TODO fix checks
        if self.client:
            self.check_data = self.client.post_check(head_branch=self.branch, head_sha=self.revision, req=req)

    def pre_check(self):
        success = self.module.pre_check()
        conclusion = None
        self.text_data = '<!--{{"current":{},"total":{}, "fail_type":{},"acc":{},"last_acc":{} }}-->'.format(
            self.module.current_step, self.module.max_steps, self.module.fail_type, self.module.acc,
            self.module.last_acc)
        out_obj = {
            "title": "{} test suite".format(self.name),
            "summary": self.summary,
            "text": 'Started Check ' + self.text_data
        }
        self.update_check_status(out_obj, conclusion)
        return success

    def pos_check(self, acc):
        success = self.module.pos_check(acc)
        conclusion = None
        self.text_data = '<!--{{"current":{},"total":{}, "fail_type":{},"acc":{},"last_acc":{} }}-->'.format(
            self.module.current_step, self.module.max_steps, self.module.fail_type, self.module.acc,
            self.module.last_acc)
        out_obj = {
            "title": "{} test suite".format(self.name),
            "summary": self.summary,
            "text": 'Started Check ' + self.text_data
        }
        self.update_check_status(out_obj, conclusion)
        return success

    def finish_check(self, conclusion=None, summary=None, text=None, fail_type=None):

        # Merge data and messages
        if summary:
            self.summary = summary
        if fail_type is not None:
            self.module.fail_type = fail_type
        if text:
            self.text = text

        if self.module.fail_type != 0:
            modelStatus = 'failed'
        else:
            modelStatus = 'passed'

        # Prepare message to to report:
        msgHtml = " {} (ease.ml) completed succesfully on:<br/>\
            &emsp;<b>project</b>: {}<br/>\
            &emsp;<b>branch</b>: {}<br/>\
            &emsp;<b>revision</b>: {}<br/><br/>\
            <b>Model status</b>: {}<br/>\
            <b>Condition evaluated</b>: {}<br/>\
            <b>Samples required</b>: {}<br/>\
            <b>Model accuracy now</b>: {}<br/>\
            <b>Model accuracy before</b>: {}<br/>\
            <b>Run number</b>: {}/{}<br/>\
            <b>Conclusion</b>: {}<br/>\
            <br/>This is e-mail is sent automatically by the ease.ml bot\
            due to your settings in the .easeml.yml file\
            ".format(self.name, self.project, self.branch, self.revision, modelStatus,
                     self.module.sample_calculator.condition,
                     self.module.N, self.module.acc, self.module.last_acc, self.module.current_step,
                     self.module.max_steps,
                     self.text) + self.module.msgHtml_rel + self.module.msgHtml_error

        # Prepare e-mail
        mail = sendMailGmail.EaseMailer()
        to = self.module.sample_calculator.email
        subject = "{} results".format(self.name)
        # mail.SendMessage(to, subject, msgHtml)

        if self.module.fail_type == 0:
            self.module.set_last_acc(self.module.acc)

        # Prepare check_run data
        self.text_data = '<!--{{"current":{},"total":{}, "fail_type":{},"acc":{},"last_acc":{} }}-->'.format(
            self.module.current_step, self.module.max_steps, self.module.fail_type, self.module.acc,
            self.module.last_acc)
        # FIXME HACKY
        d = None
        if not self.client:
            d = {"current": self.module.current_step, "total": self.module.max_steps,
                 "fail_type": self.module.fail_type, "acc": self.module.acc, "last_acc": self.module.last_acc}
        # FOR VLDB2019
        if self.module.fail_type != 0:
            msgHtml = "Model failed the condition {}".format(self.module.sample_calculator.condition)
        else:
            msgHtml = "Model passed the condition {}".format(self.module.sample_calculator.condition)

        if conclusion == 'success':

            out_obj = {
                "title": "{} test suite".format(self.name),
                "summary": self.summary,
                "text": msgHtml + self.text_data
            }

        elif conclusion == 'failure':
            out_obj = {
                "title": "{} test suite".format(self.name),
                "summary": self.summary,
                "text": msgHtml + self.text_data
            }
        else:
            conclusion = 'neutral'
            out_obj = {
                "title": "{} test suite".format(self.name),
                "summary": self.summary,
                "text": msgHtml + self.text_data
            }

        # HACKY
        if not self.client:
            d['conclusion'] = conclusion
            d['msg']=out_obj
            with open('run_statistics.json', 'w') as outfile:
                json.dump(d, outfile)
            command = ["git", "add", "run_statistics.json"]
            utils.command_base(command)

            commit_message = 'Adding run statistics [skip ci]'
            command = ["git", "commit", "-m {}".format(commit_message)]
            utils.command_base(command)

            token = self.token
            command = (
                "git push https://{}:{}@github.com/{}.git".format(self.user_or_app_name, token, self.project)).split()
            utils.command_base(command)
        self.update_check_status(out_obj, conclusion)

    def update_check_status(self, out_obj=None, conclusion=None):
        t = datetime.datetime.now()
        tform = t.strftime('%Y-%m-%dT%H:%M:%SZ')

        print("@ out_obj ", out_obj)

        if conclusion:
            req = {"name": self.name,
                   "status": "completed",
                   "conclusion": conclusion,
                   "completed_at": tform,
                   "output": out_obj
                   }
        else:
            req = {"name": self.name,
                   "output": out_obj
                   }
        if self.client:
            self.check_data = self.client.update_check(check_run_id=self.check_data["id"], req=req)


class EaseMLCICDRunner:
    def __init__(self, app_id, inst_id_or_token, project, revision, branch, github_action_g):
        self.app_id = app_id
        self.inst_id_or_token = inst_id_or_token
        self.project = project
        self.revision = revision
        self.branch = branch
        self.client = None
        self.token = None
        self.github_action = github_action_g
        self.pkey = os.getenv("HOME") + "/.easeml/keys/service_private_key.pem"
        if github_action_g:
            self.pkey = None
        self.yamld = None
        print("\n appid={}\
                \n instid={}\
                \n project={}\
                \n revision={}\
                \n branch={}\
                \n token={}\
                ".format(self.app_id, self.inst_id_or_token, self.project, self.revision, self.branch, self.token)
              )

    def connect_and_get_access_token(self):
        # TODO fix checks
        if self.github_action:
            self.client = None  # Github("access_token")
            # self.client = github_api.GithubClient(app_id=self.app_id, installation_id=self.inst_id_or_token,
            #                                      private_key_file=self.pkey, repo_slug=self.project, is_action=self.github_action)
            self.token = self.inst_id_or_token
        else:
            self.client = github_api.GithubClient(app_id=self.app_id, installation_id=self.inst_id_or_token,
                                                  private_key_file=self.pkey, repo_slug=self.project)
            self.token = self.client.auth_token

    def remove_previous_run(self):
        shutil.rmtree(self.project, ignore_errors=True)

    def clone_repository(self):
        command = ['git', 'clone', "--progress", "--verbose",
                   'https://x-access-token:{}@github.com/{}.git'.format(self.token, self.project), self.project]
        return utils.command_base(command)

    def build_docker(self):
        command = ["docker", "build", "--tag=test", '.']
        return utils.command_base(command)

    def run_docker(self):
        fpath = os.getenv("HOME") + "/.easeml/results"
        command = ["docker", "run", "--network", "none", "-v", f"{fpath}:/data", "test"]
        return utils.command_base(command)

    def copy_lib_and_id(self):
        with open('libs/id.txt', 'w') as f:
            f.write(self.project)
        library_path = os.path.dirname(easeml_cicd.__file__)
        src = os.path.join(library_path, "eval/easeml.py")
        dst = "libs/easeml.py"
        copyfile(src, dst)

    def read_results(self):
        src = os.getenv("HOME") + "/.easeml/results/" + self.project
        with open(src + '/results.txt') as f:
            acc = f.read().splitlines()[0]
        return acc

    def broadcast_result(self, acc):
        # TODO hardcoded url used to post results for competition
        # Not used for vldb demo 2019
        query = "http://3.13.138.171/scoresWorkshop.php?proj={}&score={}".format(self.project, acc)
        r = requests.get(query)
        print(r)
        print(r.content)
        return

    def run_checks(self):
        os.chdir(self.project)
        check_names = ['easeML/cicd']
        check_module = [utils.EaseMLCICDRunnerSampleManager]

        checks = []
        for name, module in zip(check_names, check_module):
            c = EaseMLCICDCheckManager(name, self.client, self.app_id, self.inst_id_or_token, self.project,
                                       self.revision,
                                       self.branch,
                                       module)
            c.start_check()
            checks.append(c)

        return_statuses = []
        for c in checks:
            return_statuses.append(c.pre_check())

        self.copy_lib_and_id()
        if self.build_docker():
            print("## DOCKER BUILD FAILURE")
            for c in checks:
                c.finish_check(conclusion='neutral', summary="Couldn't build the model",
                               text="Error: Couldn't build the dockerized model; test the docker container with the "
                                    "committed evaluate_model.py locally",
                               fail_type=-1)
            exit(1)

        if self.run_docker():
            print("## DOCKER RUN FAILURE")
            for c in checks:
                c.finish_check(conclusion='neutral', summary="Couldn't run the model",
                               text="Error: Couldn't run the dockerized model; test the docker container with the "
                                    "committed evaluate_model.py locally",
                               fail_type=-2)
            exit(1)

        acc = self.read_results()
        # self.broadcastResult(acc)
        for success, c in zip(return_statuses, checks):
            if success:
                c.pos_check(acc)

        for c in checks:
            c.finish_check(conclusion='neutral', summary="Ran successfully", text='Your accuracy= ' + acc)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='easeML ci&cd github app orchestrator')
    parser.add_argument('app_id')
    parser.add_argument('inst_id_or_token')
    parser.add_argument('project')
    parser.add_argument('revision')
    parser.add_argument('branch')
    parser.add_argument('-g', '--github_action', action='store_true')
    print(parser.parse_args())
    app_id_g = parser.parse_args().app_id
    inst_id_or_token_g = parser.parse_args().inst_id_or_token
    project_g = parser.parse_args().project
    revision_g = parser.parse_args().revision
    branch_g = parser.parse_args().branch
    github_action_g = parser.parse_args().github_action
    print("####", github_action_g)
    eml = EaseMLCICDRunner(app_id_g, inst_id_or_token_g, project_g, revision_g, branch_g, github_action_g)
    eml.connect_and_get_access_token()
    eml.remove_previous_run()
    eml.clone_repository()
    eml.run_checks()
